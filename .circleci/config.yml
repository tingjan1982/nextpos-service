#
# Configuration reference: https://circleci.com/docs/2.0/configuration-reference/
# Java config: https://circleci.com/docs/2.0/language-java/
# GCP howto: https://localghost.dev/2019/12/deploying-your-google-appengine-app-with-circleci/
#
version: 2.1

workflows:
  build-and-deploy:
    jobs:
      - build:
          context: "GitHub Release Credentials"
      - docker:
          requires:
            - build
          context: "Docker"
      - deploy:
          requires:
            - docker
          context: "Docker"

jobs:
  build:
    docker:
      - image: amazoncorretto:11
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      # required by persist_to_space step
      - run: yum install -y tar
      - run: yum install -y gzip
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run: ./gradlew clean build -x test -PciBuild
      - run: mkdir -p source/libs ; cp build/libs/*.jar source/libs ; cp Dockerfile source/libs
      - persist_to_workspace:
          root: source
          paths:
            - libs

  docker:
    docker:
      - image: circleci/openjdk:11
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

      working_directory: ~/repo

      environment:
        # Customize the JVM maximum heap limit
        JVM_OPTS: -Xmx3200m
        TERM: dumb
    steps:
      - setup_remote_docker:
          version: 20.10.11
      - attach_workspace:
          at: source
      - run:
          name: build docker image
          command: |
            echo $GOOGLE_SERVICE_ACCOUNT_JSON | base64 -d > source/libs/service_account.json
            docker build -t joelin/nextpos-service:latest --build-arg JAR_FILE=nextpos-service-0.0.1-SNAPSHOT.jar --build-arg SERVICE_ACCOUNT_JSON=service_account.json source/libs
      - run:
          name: docker login
          command: |
            echo $DOCKER_PASSWORD | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: push docker image
          command: |
            docker push joelin/nextpos-service:latest
  deploy:
    docker:
      - image: google/cloud-sdk:249.0.0-alpine
    steps:
      - run:
          name: deploy to gcp
          command: |
            gcloud components install kubectl --quiet
            gcloud config set project helpful-range-236813
            echo $GOOGLE_SERVICE_ACCOUNT_JSON | base64 -d > service_account.json
            gcloud auth activate-service-account travis-ci-user@helpful-range-236813.iam.gserviceaccount.com --key-file=service_account.json
            gcloud config set compute/zone asia-east1-b
            gcloud container clusters get-credentials rainapp-cluster --zone asia-east1-b --project helpful-range-236813
            kubectl get deployment nextpos-service
            kubectl set image deployment/nextpos-service nextpos-service=docker.io/joelin/nextpos-service
            kubectl get services nextpos-service-nodeport
