# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

workflows:
  build-and-deploy:
    jobs:
      - build:
          context: "GitHub Release Credentials"
      - docker:
          requires:
            - build
          context: "Docker"
      - deploy:
          requires:
            - deploy
          context: "Docker"

jobs:
  build:
    docker:
      - image: amazoncorretto:11
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run: ./gradlew clean build -x test -PciBuild
  docker:
    machine: true
    steps:
      - checkout
      - run: |
          echo $GOOGLE_SERVICE_ACCOUNT_JSON | base64 -d | docker build -t joelin/nextpos-service:latest --build-arg JAR_FILE=$CIRCLE_WORKING_DIRECTORY/build/libs/nextpos-service-0.0.1-SNAPSHOT.jar --build-arg SERVICE_ACCOUNT_JSON=- $CIRCLE_WORKING_DIRECTORY
      - run:
          name: docker login
          command: |
            echo $DOCKER_PASSWORD | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: push docker image
          command: |
            docker push joelin/nextpos-service:latest
  deploy:
    docker:
      - image: google/cloud-sdk:249.0.0-alpine
    steps:
      - checkout
      - run: ls -l ; sh deploy_gcp.sh
